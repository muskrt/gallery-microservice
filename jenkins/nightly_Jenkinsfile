pipeline 
{
    agent any
    environment {
        PATH=sh(script:"echo $PATH:/usr/local/bin", returnStdout:true).trim()
        APP_NAME="gallery"
        BUILD_ENV="nightly"
        APP_REPO_NAME="scottkurt/gallery"
        AWS_ACCOUNT_ID=sh(script:'export PATH="$PATH:/usr/local/bin" && aws sts get-caller-identity --query Account --output text', returnStdout:true).trim()
        AWS_REGION="us-east-1"
        ECR_REGISTRY="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
        ANS_KEYPAIR="gallery-${APP_NAME}-dev-${BUILD_NUMBER}.key"
        ANSIBLE_PRIVATE_KEY_FILE="${WORKSPACE}/${ANS_KEYPAIR}"
        ANSIBLE_HOST_KEY_CHECKING="False"
    }
    stages 
    {
      
        stage('Prepare Tags for Docker Images') {
            steps {
                echo 'Preparing Tags for Docker Images'
                script {
                    env.IMAGE_TAG_APIGW_SERVICE="${APP_REPO_NAME}:apigw-service_${BUILD_ENV}_${BUILD_NUMBER}"
                    env.IMAGE_TAG_LOGIN_SERVICE="${APP_REPO_NAME}:login-service_${BUILD_ENV}_${BUILD_NUMBER}"
                    env.IMAGE_TAG_LANDING_SERVICE="${APP_REPO_NAME}:landing-service_${BUILD_ENV}_${BUILD_NUMBER}"
                    env.IMAGE_TAG_NOTES_SERVICE="${APP_REPO_NAME}:notes-service_${BUILD_ENV}_${BUILD_NUMBER}"
                                        
                }
            }
        }   
        stage('Build  Docker Images') {
            steps {
                echo 'Building   Images'
                sh ". ./nightly/build-tag-docker-images.sh"
                sh 'docker image ls'
            }
        }
        stage('Push Images to Docker Repo') {
            steps {
                echo "Pushing ${APP_NAME} App Images to  Repo"
                sh ". ./nightly/push-images-to-registry.sh"
            }
        }
        stage('Deploy App on Kubernetes cluster'){
            steps {
                echo 'Deploying App on Kubernetes'
                sh "envsubst < k8s/gallery_chart/values-template.yaml > k8s/gallery_chart/values.yaml"
                sh "sed -i s/HELM_VERSION/${BUILD_NUMBER}/ k8s/gallery_chart/Chart.yaml"
                sh "helm repo add stable-gallery s3://gallery-helm-charts/stable/myapp/"
                sh "helm package k8s/gallery_chart"
                sh "helm s3 push --force gallery_chart-${BUILD_NUMBER}.tgz stable-gallery"
                sh "sleep 60"    
                sh "envsubst < ansible/playbooks/deploy_gallery_template.yaml > ansible/playbooks/deploy_gallery.yaml"
                sh "ansible-playbook -i ./ansible/inventory/dynamic_inventory_aws_ec2.yaml ./ansible/playbooks/deploy_gallery.yaml"
            }
        } 
    }

}

pipeline 
{
    agent any
    environment {
        PATH=sh(script:"echo $PATH:/usr/local/bin", returnStdout:true).trim()
        APP_NAME="gallery"
        BUILD_ENV="nightly"
        APP_REPO_NAME="scottkurt/gallery"
        AWS_ACCOUNT_ID=sh(script:'export PATH="$PATH:/usr/local/bin" && aws sts get-caller-identity --query Account --output text', returnStdout:true).trim()
        AWS_REGION="us-east-1"
        ANS_KEYPAIR="gallery-${APP_NAME}-dev-${BUILD_NUMBER}.key"
        ANSIBLE_PRIVATE_KEY_FILE="${WORKSPACE}/${ANS_KEYPAIR}"
        ANSIBLE_HOST_KEY_CHECKING="False"
    }
    stages 
    {
        stage('Prepare Tags for Docker Images') {
            steps {
                echo 'Preparing Tags for Docker Images'
                script {
                    env.IMAGE_TAG_APIGW_SERVICE="${APP_REPO_NAME}:apigw-service_${BUILD_ENV}_${BUILD_NUMBER}"
                    env.IMAGE_TAG_LOGIN_SERVICE="${APP_REPO_NAME}:login-service_${BUILD_ENV}_${BUILD_NUMBER}"
                    env.IMAGE_TAG_LANDING_SERVICE="${APP_REPO_NAME}:landing-service_${BUILD_ENV}_${BUILD_NUMBER}"
                    env.IMAGE_TAG_NOTES_SERVICE="${APP_REPO_NAME}:notes-service_${BUILD_ENV}_${BUILD_NUMBER}"
                                        
                }
            }
        } 
        stage('Create Helm Repo') {
            steps {
                echo "Creating Helm Repo for ${APP_NAME} app"
                sh   'nightly/create-helm-repo.sh'
            }
        }
        stage('Build  Docker Images') {
            steps {
                echo 'Building   Images'
                sh ". ./nightly/build-tag-docker-images.sh"
                sh 'docker image ls'
            }
        }
        /*
        stage('Generate coverage report') {
            steps {
                echo "Pushing ${APP_NAME} App Images to  Repo"
                sh ". ./nightly/unit-tests.sh"
            }
        }
        */
        stage('Publish coverage report') {
            steps{
                archiveArtifacts "**/coverage.xml"
    
                cobertura(
                    coberturaReportFile: "coverage.xml",
                    onlyStable: true,
                    failNoReports: true,
                    failUnhealthy: false,
                    failUnstable: true,
                    autoUpdateHealth: true,
                    autoUpdateStability: true,
                    zoomCoverageChart: true,
                    maxNumberOfBuilds: 0,
                    lineCoverageTargets: '45, 45, 45,45',
                    )
            }
            
        }
        stage('Push Images to Docker Repo') {
            steps {
                echo "Pushing ${APP_NAME} App Images to  Repo"
                sh ". ./nightly/push-images-to-registry.sh"
            }
        }  
        stage('Create K8 Cluster') {
            steps {
                echo "Creating Key Pair for ${APP_NAME} App"
                sh "aws ec2 create-key-pair --region ${AWS_REGION} --key-name ${ANS_KEYPAIR} --query KeyMaterial --output text > ${ANS_KEYPAIR}"
                sh "chmod 400 ${ANS_KEYPAIR}"
                echo 'Creating  Automation Infrastructure for Dev Environment'
                sh """
                    cd infrastructure/msp_devops_21_k8_setup
                    sed -i "s/linux/$ANS_KEYPAIR/g" main.tf
                    terraform init
                    terraform apply -auto-approve -no-color
                """
                script {
                    echo "Kubernetes Master is not UP and running yet."
                    env.id = sh(script: 'aws ec2 describe-instances --filters Name=tag-value,Values=master Name=tag-value,Values=tera-kube-ans Name=instance-state-name,Values=running --query Reservations[*].Instances[*].[InstanceId] --output text',  returnStdout:true).trim()
                    sh 'aws ec2 wait instance-status-ok --instance-ids $id'
                }
                echo "Setup Kubernetes cluster for ${APP_NAME} App"
                sh "ansible-playbook -i ./ansible/inventory/dynamic_inventory_aws_ec2.yaml ./ansible/playbooks/k8_setup.yaml"
            }
        }
        stage('Deploy App on Kubernetes cluster'){
            steps {
                echo 'Deploying App on Kubernetes'
                sh "envsubst < k8/gallery_chart/values-template.yaml > k8/gallery_chart/values.yaml"
                sh "sed -i s/0.1.0/${BUILD_NUMBER}/g k8/gallery_chart/Chart.yaml"
                sh "helm repo add stable-gallery s3://gallery-helm-charts/stable/gallery/"
                sh "helm package k8/gallery_chart"
                sh "helm s3 push --force gallery_chart-${BUILD_NUMBER}.tgz stable-gallery"
                sh "sleep 60"    
                sh "envsubst < ansible/playbooks/deploy_gallery_template.yaml > ansible/playbooks/deploy_gallery.yaml"
                sh "ansible-playbook -i ./ansible/inventory/dynamic_inventory_aws_ec2.yaml ./ansible/playbooks/deploy_gallery.yaml"
            }
        }   
        stage('Input') {
            steps {
                input('Do you want to proceed?')
            }
        }
    }
    post {
        always {
            echo 'Tear down the Kubernetes Cluster'
            sh """
            cd infrastructure/msp_devops_21_k8_setup
            terraform destroy -auto-approve -no-color
            """
            echo "Delete existing key pair using AWS CLI"
            sh "aws ec2 delete-key-pair --region ${AWS_REGION} --key-name ${ANS_KEYPAIR}"
            sh "rm -rf ${ANS_KEYPAIR}"
            sh "gallery_chart*.tgz"
        }
    }
    
}
